version: '3.8'

services:
  # AI Agents Platform
  ai-agents:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tiation-ai-agents
    ports:
      - "8080:8080"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://ai_agents:ai_agents_password@postgres:5432/ai_agents_db
      - LIBERATION_SYSTEM_URL=http://liberation-system:3000
      - TERMINAL_WORKFLOWS_ENABLED=true
      - ENTERPRISE_DASHBOARD_ENABLED=true
      - LOG_LEVEL=info
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    networks:
      - tiation-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tiation-postgres
    environment:
      - POSTGRES_DB=ai_agents_db
      - POSTGRES_USER=ai_agents
      - POSTGRES_PASSWORD=ai_agents_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - tiation-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tiation-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - tiation-network

  # Liberation System Integration (Optional)
  liberation-system:
    image: tiation/liberation-system:latest
    container_name: tiation-liberation-system
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://liberation:liberation_password@postgres:5432/liberation_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - tiation-network
    profiles:
      - full-stack

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: tiation-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - tiation-network
    profiles:
      - monitoring

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: tiation-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - tiation-network
    profiles:
      - monitoring

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: tiation-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/html:/usr/share/nginx/html
    depends_on:
      - ai-agents
      - liberation-system
    restart: unless-stopped
    networks:
      - tiation-network
    profiles:
      - production

  # Log Aggregation
  fluentd:
    image: fluent/fluentd:latest
    container_name: tiation-fluentd
    volumes:
      - ./logging/fluentd.conf:/fluentd/etc/fluent.conf
      - ./logs:/var/log/tiation
    depends_on:
      - ai-agents
    restart: unless-stopped
    networks:
      - tiation-network
    profiles:
      - logging

  # Elasticsearch (for log storage)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: tiation-elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - tiation-network
    profiles:
      - logging

  # Kibana (for log visualization)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: tiation-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - tiation-network
    profiles:
      - logging

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  tiation-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
